<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions">Functions</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.functions.validation">Validation functions</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Validation functions</h2>
	<p>These functions can be used when checking and validating the format of fields and values.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#alphanum">
						<code>is::alphanum()</code>
					</a>
				</td>
				<td>Checks whether a value has only alphanumeric characters</td>
			</tr>
			<tr>
				<td>
					<a href="#alpha">
						<code>is::alpha()</code>
					</a>
				</td>
				<td>Checks whether a value has only alpha characters</td>
			</tr>
			<tr>
				<td>
					<a href="#ascii">
						<code>is::ascii()</code>
					</a>
				</td>
				<td>Checks whether a value has only ascii characters</td>
			</tr>
			<tr>
				<td>
					<a href="#datetime">
						<code>is::datetime()</code>
					</a>
				</td>
				<td>Checks whether a value matches a datetime format</td>
			</tr>
			<tr>
				<td>
					<a href="#domain">
						<code>is::domain()</code>
					</a>
				</td>
				<td>Checks whether a value is a domain</td>
			</tr>
			<tr>
				<td>
					<a href="#email">
						<code>is::email()</code>
					</a>
				</td>
				<td>Checks whether a value is an email</td>
			</tr>
			<tr>
				<td>
					<a href="#hexadecimal">
						<code>is::hexadecimal()</code>
					</a>
				</td>
				<td>Checks whether a value is hexadecimal</td>
			</tr>
			<tr>
				<td>
					<a href="#latitude">
						<code>is::latitude()</code>
					</a>
				</td>
				<td>Checks whether a value is a latitude value</td>
			</tr>
			<tr>
				<td>
					<a href="#longitude">
						<code>is::longitude()</code>
					</a>
				</td>
				<td>Checks whether a value is a longitude value</td>
			</tr>
			<tr>
				<td>
					<a href="#numeric">
						<code>is::numeric()</code>
					</a>
				</td>
				<td>Checks whether a value has only numeric characters</td>
			</tr>
			<tr>
				<td>
					<a href="#semver">
						<code>is::semver()</code>
					</a>
				</td>
				<td>Checks whether a value matches a semver version</td>
			</tr>
			<tr>
				<td>
					<a href="#url">
						<code>is::url()</code>
					</a>
				</td>
				<td>Checks whether a value is a valid URL</td>
			</tr>
			<tr>
				<td>
					<a href="#uuid">
						<code>is::uuid()</code>
					</a>
				</td>
				<td>Checks whether a value is a UUID</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "alphanum"}}>

	<Layout::Text text-l text-f>
		<h3>is::alphanum</h3>
		<p>The <code>is::alphanum</code> function checks whether a value has only alphanumeric characters.</p>
		<Code @name="docs-surrealql-functions-is-alphanum.surql" text="API Definition">
			is::alphanum(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-alphanum-input.surql">
				SELECT * FROM is::alphanum("ABC123");
			</Code>
			<Code @name="docs-surrealql-functions-is-alphanum-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-alphanum-error-input.surql">
				SELECT * FROM is::alphanum(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-alphanum-error-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "alpha"}}>

	<Layout::Text text-l text-f>
		<h3>is::alpha</h3>
		<p>The <code>is::alpha</code> function checks whether a value has only alpha characters.</p>
		<Code @name="docs-surrealql-functions-is-alpha.surql" text="API Definition">
			is::alpha(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-alpha-input.surql">
				SELECT * FROM is::alpha("ABCDEF");
			</Code>
			<Code @name="docs-surrealql-functions-is-alpha-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-alpha-error-input.surql">
				SELECT * FROM is::alpha(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-alpha-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "ascii"}}>

	<Layout::Text text-l text-f>
		<h3>is::ascii</h3>
		<p>The <code>is::ascii</code> function checks whether a value has only ascii characters.</p>
		<Code @name="docs-surrealql-functions-is-ascii.surql" text="API Definition">
			is::ascii(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-ascii-input.surql">
				SELECT * FROM is::ascii("ABC123");
			</Code>
			<Code @name="docs-surrealql-functions-is-ascii-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-ascii-error-input.surql">
				SELECT * FROM is::ascii(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-ascii-error-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "datetime"}}>

	<Layout::Text text-l text-f>
		<h3>is::datetime</h3>
		<p>The <code>is::datetime</code> function checks whether a value matches a datetime format.</p>
		<Code @name="docs-surrealql-functions-is-datetime.surql" text="API Definition">
			is::datetime(string, string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-datetime-input.surql">
				SELECT * FROM is::datetime("2015-09-05 23:56:04", "%Y-%m-%d %H:%M:%S");
			</Code>
			<Code @name="docs-surrealql-functions-is-datetime-result.txt">
				true
			</Code>
		</codes>
		<p>If either of the two arguments are not strings, then an <Link @link="docs.surrealql.datamodel.simple"><code>EMPTY</code></Link> value will be returned:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-datetime-error-input.surql">
				SELECT * FROM is::datetime(12345, 67890);
			</Code>
			<Code @name="docs-surrealql-functions-is-datetime-error-result.txt">
				null
			</Code>
		</codes>
	</Layout::Text>

	<Layout::Gap tiny />

	<details>

		<summary>View all format options</summary>

		<h5>Date formatters</h5>

		<Layout::Table filled>
			<table>
				<thead>
					<tr>
						<th w-10>Specifier</th>
		                <th w-10>Example</th>
						<th w-80>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>%Y</code></td>
						<td><code>2001</code></td>
						<td>The full proleptic Gregorian year, zero-padded to 4 digits.</td>
					</tr>
					<tr>
						<td><code>%C</code></td>
						<td><code>20</code></td>
						<td>The proleptic Gregorian year divided by 100, zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%y</code></td>
						<td><code>01</code></td>
						<td>The proleptic Gregorian year modulo 100, zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%m</code></td>
						<td><code>07</code></td>
						<td>Month number (01 to 12), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%b</code></td>
						<td><code>Jul</code></td>
						<td>Abbreviated month name. Always 3 letters.</td>
					</tr>
					<tr>
						<td><code>%B</code></td>
						<td><code>July</code></td>
						<td>Full month name.</td>
					</tr>
					<tr>
						<td><code>%h</code></td>
						<td><code>Jul</code></td>
						<td>Same as <code>%b</code>.</td>
					</tr>
					<tr>
						<td><code>%d</code></td>
						<td><code>08</code></td>
						<td>Day number (01 to 31), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%e</code></td>
						<td><code>8</code></td>
						<td>Same as <code>%d</code> but space-padded. Same as <code>%_d</code>.</td>
					</tr>
					<tr>
						<td><code>%a</code></td>
						<td><code>Sun</code></td>
						<td>Abbreviated weekday name. Always 3 letters.</td>
					</tr>
					<tr>
						<td><code>%A</code></td>
						<td><code>Sunday</code></td>
						<td>Full weekday name.</td>
					</tr>
					<tr>
						<td><code>%w</code></td>
						<td><code>0</code></td>
						<td>Day of the week. Sunday = 0, Monday = 1, ..., Saturday = 6.</td>
					</tr>
					<tr>
						<td><code>%u</code></td>
						<td><code>7</code></td>
						<td>Day of the week. Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)</td>
					</tr>
					<tr>
						<td><code>%U</code></td>
						<td><code>28</code></td>
						<td>Week number starting with Sunday (00 to 53), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%W</code></td>
						<td><code>27</code></td>
						<td>Same as <code>%U</code>, but week 1 starts with the first Monday in that year instead.</td>
					</tr>
					<tr>
						<td><code>%G</code></td>
						<td><code>2001</code></td>
						<td>Same as <code>%Y</code> but uses the year number in ISO 8601 week date.</td>
					</tr>
					<tr>
						<td><code>%g</code></td>
						<td><code>01</code></td>
						<td>Same as <code>%y</code> but uses the year number in ISO 8601 week date.</td>
					</tr>
					<tr>
						<td><code>%V</code></td>
						<td><code>27</code></td>
						<td>Same as <code>%U</code> but uses the week number in ISO 8601 week date (01 to 53).</td>
					</tr>
					<tr>
						<td><code>%j</code></td>
						<td><code>189</code></td>
						<td>Day of the year (001 to 366), zero-padded to 3 digits.</td>
					</tr>
					<tr>
						<td><code>%D</code></td>
						<td><code>07/08/01</code></td>
						<td>Month-day-year format. Same as <code>%m/%d/%y</code>.</td>
					</tr>
					<tr>
						<td><code>%x</code></td>
						<td><code>07/08/01</code></td>
						<td>Locale's date representation.</td>
					</tr>
					<tr>
						<td><code>%F</code></td>
						<td><code>2001-07-08</code></td>
						<td>Year-month-day format (ISO 8601). Same as <code>%Y-%m-%d</code>.</td>
					</tr>
					<tr>
						<td><code>%v</code></td>
						<td><code>8-Jul-2001</code></td>
						<td>Day-month-year format. Same as <code>%e-%b-%Y</code>.</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>

		<h5>Time formatters</h5>

		<Layout::Table filled>
			<table>
				<thead>
					<tr>
						<th w-10>Specifier</th>
		                <th w-10>Example</th>
						<th w-80>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>%H</code></td>
						<td><code>00</code></td>
						<td>Hour number (00 to 23), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%k</code></td>
						<td><code>0</code></td>
						<td>Same as <code>%H</code> but space-padded. Same as <code>%_H</code>.</td>
					</tr>
					<tr>
						<td><code>%I</code></td>
						<td><code>12</code></td>
						<td>Hour number in 12-hour clocks (01 to 12), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%l</code></td>
						<td><code>12</code></td>
						<td>Same as <code>%I</code> but space-padded. Same as <code>%_I</code>.</td>
					</tr>
					<tr>
						<td><code>%P</code></td>
						<td><code>am</code></td>
						<td><code>am</code> or <code>pm</code> in 12-hour clocks.</td>
					</tr>
					<tr>
						<td><code>%p</code></td>
						<td><code>AM</code></td>
						<td><code>AM</code> or <code>PM</code> in 12-hour clocks.</td>
					</tr>
					<tr>
						<td><code>%M</code></td>
						<td><code>34</code></td>
						<td>Minute number (00 to 59), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%S</code></td>
						<td><code>60</code></td>
						<td>Second number (00 to 60), zero-padded to 2 digits.</td>
					</tr>
					<tr>
						<td><code>%f</code></td>
						<td><code>026490000</code></td>
						<td>The fractional seconds (in nanoseconds) since last whole second.</td>
					</tr>
					<tr>
						<td><code>%.f</code></td>
						<td><code>.026490</code></td>
						<td>Similar to <code>%f</code> but left-aligned.</td>
					</tr>
					<tr>
						<td><code>%.3f</code></td>
						<td><code>.026</code></td>
						<td>Similar to <code>.%f</code> but left-aligned but fixed to a length of 3.</td>
					</tr>
					<tr>
						<td><code>%.6f</code></td>
						<td><code>.026490</code></td>
						<td>Similar to <code>.%f</code> but left-aligned but fixed to a length of 6.</td>
					</tr>
					<tr>
						<td><code>%.9f</code></td>
						<td><code>.026490000</code></td>
						<td>Similar to <code>.%f</code> but left-aligned but fixed to a length of 9.</td>
					</tr>
					<tr>
						<td><code>%3f</code></td>
						<td><code>026</code></td>
						<td>Similar to <code>%.3f</code> but without the leading dot.</td>
					</tr>
					<tr>
						<td><code>%6f</code></td>
						<td><code>026490</code></td>
						<td>Similar to <code>%.6f</code> but without the leading dot.</td>
					</tr>
					<tr>
						<td><code>%9f</code></td>
						<td><code>026490000</code></td>
						<td>Similar to <code>%.9f</code> but without the leading dot.</td>
					</tr>
					<tr>
						<td><code>%R</code></td>
						<td><code>00:34</code></td>
						<td>Hour-minute format. Same as <code>%H:%M</code>.</td>
					</tr>
					<tr>
						<td><code>%T</code></td>
						<td><code>00:34:59</code></td>
						<td>Hour-minute-second format. Same as <code>%H:%M:%S</code>.</td>
					</tr>
					<tr>
						<td><code>%X</code></td>
						<td><code>00:34:59</code></td>
						<td>Locale's time representation.</td>
					</tr>
					<tr>
						<td><code>%r</code></td>
						<td><code>12:34:59 AM</code></td>
						<td>Hour-minute-second format in 12-hour clocks. Same as <code>%I:%M:%S %p</code>.</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>

		<h5>Timezone formatters</h5>

		<Layout::Table filled>
			<table>
				<thead>
					<tr>
						<th w-10>Specifier</th>
		                <th w-10>Example</th>
						<th w-80>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>%Z</code></td>
						<td><code>ACST</code></td>
						<td>Local time zone name.</td>
					</tr>
					<tr>
						<td><code>%z</code></td>
						<td><code>+0930</code></td>
						<td>Offset from the local time to UTC (with UTC being <code>+0000</code>).</td>
					</tr>
					<tr>
						<td><code>%:z</code></td>
						<td><code>+09:30</code></td>
						<td>Same as <code>%z</code> but with a colon.</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>

		<h5>Date & time formatters</h5>

		<Layout::Table filled>
			<table>
				<thead>
					<tr>
						<th w-10>Specifier</th>
		                <th w-10>Example</th>
						<th w-80>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>%c</code></td>
						<td><code>Sun Jul  8 00:34:59 2001</code></td>
						<td>Locale's date and time.</td>
					</tr>
					<tr>
						<td><code>%+</code></td>
						<td><code>2001-07-08T00:34:59.026490+09:30</code></td>
						<td>ISO 8601 / RFC 3339 date & time format.</td>
					</tr>
					<tr>
						<td><code>%s</code></td>
						<td><code>994518299</code></td>
						<td>UNIX timestamp, the number of seconds since 1970-01-01T00:00:00.</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>

		<h5>Other formatters</h5>

		<Layout::Table filled>
			<table>
				<thead>
					<tr>
						<th w-10>Specifier</th>
						<th w-10>Example</th>
						<th w-80>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>%t</code></td>
						<td></td>
						<td>Literal tab (<code>\t</code>).</td>
					</tr>
					<tr>
						<td><code>%n</code></td>
						<td></td>
						<td>Literal newline (<code>\n</code>).</td>
					</tr>
					<tr>
						<td><code>%%</code></td>
						<td></td>
						<td>Literal percent sign.</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>

	</details>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "domain"}}>

	<Layout::Text text-l text-f>
		<h3>is::domain</h3>
		<p>The <code>is::domain</code> function checks whether a value is a domain.</p>
		<Code @name="docs-surrealql-functions-is-domain.surql" text="API Definition">
			is::domain(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-domain-input.surql">
				SELECT * FROM is::domain("surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-domain-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-domain-error-input.surql">
				SELECT * FROM is::domain(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-domain-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "email"}}>

	<Layout::Text text-l text-f>
		<h3>is::email</h3>
		<p>The <code>is::email</code> function checks whether a value is an email.</p>
		<Code @name="docs-surrealql-functions-is-email.surql" text="API Definition">
			is::email(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-email-input.surql">
				SELECT * FROM is::email("info@surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-email-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-email-error-input.surql">
				SELECT * FROM is::email(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-email-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "hexadecimal"}}>

	<Layout::Text text-l text-f>
		<h3>is::hexadecimal</h3>
		<p>The <code>is::hexadecimal</code> function checks whether a value is hexadecimal.</p>
		<Code @name="docs-surrealql-functions-is-hexadecimal.surql" text="API Definition">
			is::hexadecimal(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-hexadecimal-input.surql">
				SELECT * FROM is::hexadecimal("ff009e");
			</Code>
			<Code @name="docs-surrealql-functions-is-hexadecimal-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-hexadecimal-error-input.surql">
				SELECT * FROM is::hexadecimal(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-hexadecimal-error-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "latitude"}}>

	<Layout::Text text-l text-f>
		<h3>is::latitude</h3>
		<p>The <code>is::latitude</code> function checks whether a value is a latitude value.</p>
		<Code @name="docs-surrealql-functions-is-latitude.surql" text="API Definition">
			is::latitude(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-latitude-input.surql">
				SELECT * FROM is::latitude("-0.118092");
			</Code>
			<Code @name="docs-surrealql-functions-is-latitude-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-latitude-error-input.surql">
				SELECT * FROM is::latitude(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-latitude-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "longitude"}}>

	<Layout::Text text-l text-f>
		<h3>is::longitude</h3>
		<p>The <code>is::longitude</code> function checks whether a value is a longitude value.</p>
		<Code @name="docs-surrealql-functions-is-longitude.surql" text="API Definition">
			is::longitude(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-longitude-input.surql">
				SELECT * FROM is::longitude("51.509865");
			</Code>
			<Code @name="docs-surrealql-functions-is-longitude-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-longitude-error-input.surql">
				SELECT * FROM is::longitude(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-longitude-error-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "numeric"}}>

	<Layout::Text text-l text-f>
		<h3>is::numeric</h3>
		<p>The <code>is::numeric</code> function checks whether a value has only numeric characters.</p>
		<Code @name="docs-surrealql-functions-is-numeric.surql" text="API Definition">
			is::numeric(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-numeric-input.surql">
				SELECT * FROM is::numeric("1484091748");
			</Code>
			<Code @name="docs-surrealql-functions-is-numeric-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-numeric-error-input.surql">
				SELECT * FROM is::numeric(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-numeric-error-result.txt">
				true
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "semver"}}>

	<Layout::Text text-l text-f>
		<h3>is::semver</h3>
		<p>The <code>is::semver</code> function checks whether a value matches a semver version.</p>
		<Code @name="docs-surrealql-functions-is-semver.surql" text="API Definition">
			is::semver(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-semver-input.surql">
				SELECT * FROM is::semver("1.0.0");
			</Code>
			<Code @name="docs-surrealql-functions-is-semver-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-semver-error-input.surql">
				SELECT * FROM is::semver(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-semver-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "url"}}>

	<Layout::Text text-l text-f>
		<h3>is::url</h3>
		<p>The <code>is::url</code> function checks whether a value is a valid URL.</p>
		<Code @name="docs-surrealql-functions-is-url.surql" text="API Definition">
			is::url(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-url-input.surql">
				SELECT * FROM is::url("https://surrealdb.com");
			</Code>
			<Code @name="docs-surrealql-functions-is-url-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-url-error-input.surql">
				SELECT * FROM is::url(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-url-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "uuid"}}>

	<Layout::Text text-l text-f>
		<h3>is::uuid</h3>
		<p>The <code>is::uuid</code> function checks whether a value is a UUID.</p>
		<Code @name="docs-surrealql-functions-is-uuid.surql" text="API Definition">
			is::uuid(string) -> boolean
		</Code>
		<p>The following example shows this function, and its output, when used in a select statement:</p>
		<codes vertical>
			<Code @name="docs-surrealql-functions-is-uuid-input.surql">
				SELECT * FROM is::uuid("ad55cae8-cf02-47ee-92a7-e137fb644a84");
			</Code>
			<Code @name="docs-surrealql-functions-is-uuid-result.txt">
				true
			</Code>
		</codes>
		<p>If the argument is not a string, then the value will be <Link @link="docs.surrealql.datamodel.casting">cast</Link> to a string before the function is run:</p>
        <codes vertical>
			<Code @name="docs-surrealql-functions-is-uuid-error-input.surql">
				SELECT * FROM is::uuid(12345);
			</Code>
			<Code @name="docs-surrealql-functions-is-uuid-error-result.txt">
				false
			</Code>
		</codes>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />